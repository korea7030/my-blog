version: '2' # docker compose 버전 정의
volumes:
  agent_python_gunicorn: {}
  ws_python_daphne: {}

services: # 서비스 정의
  web:  # 서비스명
    restart: always
    build:  # 빌드 지정
      context: ./  # Dockerfile이 있는 디렉토리의 경로
      dockerfile: config/backend/Dockerfile  # Dockerfile명
    container_name: blog_container
    volumes:  # 컨테이너에 볼륨을 마운트
      - .:/my-blog
      - agent_python_gunicorn:/run/gunicorn
    env_file:
      - ./blog.env
    expose:
      - "8000"
      - "5432"
    networks:
      - nginx_network
      - db_network
    tty: true
    depends_on:
      - db
  db:
    restart: always
    build:
      context: ./config/postgresql
      dockerfile: Dockerfile
    container_name: blogdb01
    ports:
      - 5432:5432
    env_file:
      - ./config/postgresql/db.env
    networks:
      - db_network
  nginx:
    restart: always
    build:
      context: ./config/nginx
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    volumes:
      - agent_python_gunicorn:/run/gunicorn
    depends_on: # 서비스 의존관계 정의. 컨테이너의 시작 순서만 제어
      - web # nginx 컨테이너를 시작하기 전에 web 컨테이너를 시작
    networks:
      - nginx_network
    links:
      - web
  frontend:
    build:
      context: ./
      dockerfile: config/frontend/Dockerfile
    ports:
      - "80:3000"

networks:
  nginx_network:
    driver: bridge
  db_network:
    driver: bridge
